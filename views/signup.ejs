<!DOCTYPE html>
<html ng-app="Zurvives">
<head>
  <title>Zurvives 2.0</title>

  <!-- Viewport mobile tag for sensible mobile support -->
  <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1">


  <!--
      Stylesheets and Preprocessors
      ==============================

      You can always bring in CSS files manually with `<link>` tags, or asynchronously
      using a solution like AMD (RequireJS).  Or, if you like, you can take advantage
      of Sails' conventional asset pipeline (boilerplate Gruntfile).

      By default, stylesheets from your `assets/styles` folder are included
      here automatically (between STYLES and STYLES END). Both CSS (.css) and LESS (.less)
      are supported. In production, your styles will be minified and concatenated into
      a single file.

      To customize any part of the built-in behavior, just edit `tasks/pipeline.js`.
      For example, here are a few things you could do:

          + Change the order of your CSS files
          + Import stylesheets from other directories
          + Use a different or additional preprocessor, like SASS, SCSS or Stylus
  -->

  <!--STYLES-->
  <link rel="stylesheet" href="/styles/importer.css">
  <link rel="stylesheet" href="/bower_components/bootstrap/dist/css/bootstrap.css">
  <link rel="stylesheet" href="/bower_components/bootstrap-material-design/dist/css/material-fullpalette.css">
  <link rel="stylesheet" href="/bower_components/bootstrap-material-design/dist/css/ripples.css">
  <link rel="stylesheet" href="/bower_components/bootstrap-material-design/dist/css/roboto.css">
  <link rel="stylesheet" href="/bower_components/angular-toastr/dist/angular-toastr.css">
  <!--STYLES END-->

  <!--Added this so the client has access to the csrf tag and it's grabbed first service side on every page -->
  <script type="text/javascript">
    window.SAILS_LOCALS = { _csrf: "<%= _csrf %>" };
  </script>
</head>

<body>
<div class="header">
</div>

<div class="content">
  <div class="signup" ng-controller="AuthenticationController">
    <form ng-submit="submitSignUpForm()">

      <h1>Sign Up</h1>

      <fieldset>
        <legend><span class="number">1</span>Your basic info</legend>
        <label for="name">Name:</label>
        <input ng-model="signupForm.name" type="text" id="name" name="user_name">

        <label for="mail">Email:</label>
        <input ng-model="signupForm.email" type="email" id="mail" name="user_email">

        <label for="password">Password:</label>
        <input ng-model="signupForm.password" type="password" id="password" name="user_password">

      </fieldset>
      <button type="submit">Sign Up</button>
    </form>
  </div>
</div>





<!--
    Client-side Templates
    ========================

    HTML templates are important prerequisites of modern, rich client applications.
    To work their magic, frameworks like Backbone, Angular, Ember, and Knockout require
    that you load these templates client-side.

    By default, your Gruntfile is configured to automatically load and precompile
    client-side JST templates in your `assets/templates` folder, then
    include them here automatically (between TEMPLATES and TEMPLATES END).

    To customize this behavior to fit your needs, just edit `tasks/pipeline.js`.
    For example, here are a few things you could do:

        + Import templates from other directories
        + Use a different template engine (handlebars, jade, dust, etc.)
        + Internationalize your client-side templates using a server-side
          stringfile before they're served.
-->

<!--TEMPLATES-->

<!--TEMPLATES END-->


<!--

  Client-side Javascript
  ========================

  You can always bring in JS files manually with `script` tags, or asynchronously
  on the client using a solution like AMD (RequireJS).  Or, if you like, you can
  take advantage of Sails' conventional asset pipeline (boilerplate Gruntfile).

  By default, files in your `assets/js` folder are included here
  automatically (between SCRIPTS and SCRIPTS END).  Both JavaScript (.js) and
  CoffeeScript (.coffee) are supported. In production, your scripts will be minified
  and concatenated into a single file.

  To customize any part of the built-in behavior, just edit `tasks/pipeline.js`.
  For example, here are a few things you could do:

      + Change the order of your scripts
      + Import scripts from other directories
      + Use a different preprocessor, like TypeScript

-->

<!--SCRIPTS-->
<script src="/js/dependencies/sails.io.js"></script>
<script src="/bower_components/jquery/dist/jquery.js"></script>
<script src="/bower_components/angular/angular.js"></script>
<script src="/bower_components/angular-route/angular-route.js"></script>
<script src="/bower_components/angular-bootstrap/ui-bootstrap-tpls.min.js"></script>
<script src="/bower_components/bootstrap-material-design/dist/js/material.js"></script>
<script src="/bower_components/bootstrap-material-design/dist/js/ripples.js"></script>
<script src="/bower_components/angular-toastr/dist/angular-toastr.tpls.js"></script>
<script src="/bower_components/underscore/underscore.js"></script>
<script src="/js/app.js"></script>
<script src="/js/controllers/Authentication.controller.js"></script>
<script src="/js/controllers/UserController.js"></script>
<script src="/js/controllers/homePageController.js"></script>
<!--SCRIPTS END-->
</body>
</html>
